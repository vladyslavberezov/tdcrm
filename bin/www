const http = require('http')
const {initDb} = require('../lib/db')
const env = require('../lib/env')
const app = require('../app')

async function createServer() {
  await initDb()

  try {
    /*
* Get port from environment and store in Express.
*/
    const port = normalizePort(env.PORT || '3000')
    app.set('port', port)

    /**
     * Create HTTP server.
     */
    const server = http.createServer(app)

    // connectSocket(server)

    /**
     * Listen on provided port, on all network interfaces.
     */
    server.listen(port)

    server.on('error', (error) => {
      if (error.syscall !== 'listen') {
        throw error
      }

      const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port

      // handle specific listen errors with friendly messages
      switch (error.code) {
        case 'EACCES':
          console.error(bind + ' requires elevated privileges')
          process.exit(1)
          break
        case 'EADDRINUSE':
          console.error(bind + ' is already in use')
          process.exit(1)
          break
        default:
          throw error
      }
    })
    server.on('listening', () => {
      const addr = server.address()
      const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port
      console.log('Listening on ' + bind)
    })
  } catch (error) {
    console.error('Unable to connect to the database:', error)
  }

  /**
   * Normalize a port into a number, string, or false.
   */
  function normalizePort(val) {
    const port = parseInt(val, 10)

    if (isNaN(port)) {
      // named pipe
      return val
    }

    if (port >= 0) {
      // port number
      return port
    }

    return false
  }
}

createServer()
